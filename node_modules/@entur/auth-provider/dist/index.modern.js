import React, { useState, useEffect, useContext } from 'react';
import { useAuth0, Auth0Provider } from '@auth0/auth0-react';

var defaultAuthState = {
  isLoading: false,
  isAuthenticated: false,
  user: null,
  roleAssignments: null,
  getAccessToken: function getAccessToken() {
    return Promise.resolve('');
  },
  logout: function logout() {},
  login: function login() {}
};
function createAuthContext() {
  return React.createContext(defaultAuthState);
}
var AuthContext = createAuthContext();

var Auth0AuthProvider = function Auth0AuthProvider(_ref) {
  var children = _ref.children,
    claimsNamespace = _ref.claimsNamespace,
    loginAutomatically = _ref.loginAutomatically;
  var _useAuth = useAuth0(),
    isLoading = _useAuth.isLoading,
    isAuthenticated = _useAuth.isAuthenticated,
    user = _useAuth.user,
    loginWithRedirect = _useAuth.loginWithRedirect,
    getIdTokenClaims = _useAuth.getIdTokenClaims,
    getAccessTokenSilently = _useAuth.getAccessTokenSilently,
    logout = _useAuth.logout;
  var _useState = useState(),
    roleAssignments = _useState[0],
    setRoleAssignments = _useState[1];
  useEffect(function () {
    var getClaims = function getClaims() {
      try {
        return Promise.resolve(getIdTokenClaims()).then(function (idTokenClaims) {
          if (idTokenClaims) {
            setRoleAssignments(idTokenClaims[claimsNamespace]);
          }
        });
      } catch (e) {
        return Promise.reject(e);
      }
    };
    if (isAuthenticated && claimsNamespace !== undefined) {
      getClaims();
    }
  }, [isAuthenticated, getIdTokenClaims]);
  if (!isAuthenticated && !isLoading) {
    if (loginAutomatically) {
      loginWithRedirect();
    }
  }
  return React.createElement(AuthContext.Provider, {
    value: {
      isAuthenticated: isAuthenticated,
      isLoading: isLoading,
      user: user,
      roleAssignments: roleAssignments,
      getAccessToken: getAccessTokenSilently,
      logout: logout,
      login: function login(redirectUri) {
        return loginWithRedirect({
          redirectUri: redirectUri
        });
      }
    }
  }, children);
};

var AuthProvider = function AuthProvider(_ref) {
  var auth0Config = _ref.auth0Config,
    auth0ClaimsNamespace = _ref.auth0ClaimsNamespace,
    children = _ref.children,
    _ref$loginAutomatical = _ref.loginAutomatically,
    loginAutomatically = _ref$loginAutomatical === void 0 ? true : _ref$loginAutomatical;
  return React.createElement(Auth0Provider, Object.assign({
    useRefreshToken: true,
    cacheLocation: window.location.hostname.indexOf('localhost') > -1 ? 'localstorage' : 'memory'
  }, auth0Config), React.createElement(Auth0AuthProvider, {
    claimsNamespace: auth0ClaimsNamespace,
    loginAutomatically: loginAutomatically
  }, children));
};

var useAuth = function useAuth() {
  return useContext(AuthContext);
};

export default AuthProvider;
export { useAuth };
//# sourceMappingURL=index.modern.js.map
